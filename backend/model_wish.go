/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package backend

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Wish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Wish{}

// Wish struct for Wish
type Wish struct {
	Id int32 `json:"id"`
	Product string `json:"product"`
	Price float32 `json:"price"`
	Url string `json:"url"`
	Priority PriorityEnum `json:"priority"`
}

type _Wish Wish

// NewWish instantiates a new Wish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWish(id int32, product string, price float32, url string, priority PriorityEnum) *Wish {
	this := Wish{}
	this.Id = id
	this.Product = product
	this.Price = price
	this.Url = url
	this.Priority = priority
	return &this
}

// NewWishWithDefaults instantiates a new Wish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWishWithDefaults() *Wish {
	this := Wish{}
	return &this
}

// GetId returns the Id field value
func (o *Wish) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Wish) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Wish) SetId(v int32) {
	o.Id = v
}

// GetProduct returns the Product field value
func (o *Wish) GetProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *Wish) GetProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *Wish) SetProduct(v string) {
	o.Product = v
}

// GetPrice returns the Price field value
func (o *Wish) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *Wish) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *Wish) SetPrice(v float32) {
	o.Price = v
}

// GetUrl returns the Url field value
func (o *Wish) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *Wish) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *Wish) SetUrl(v string) {
	o.Url = v
}

// GetPriority returns the Priority field value
func (o *Wish) GetPriority() PriorityEnum {
	if o == nil {
		var ret PriorityEnum
		return ret
	}

	return o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value
// and a boolean to check if the value has been set.
func (o *Wish) GetPriorityOk() (*PriorityEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Priority, true
}

// SetPriority sets field value
func (o *Wish) SetPriority(v PriorityEnum) {
	o.Priority = v
}

func (o Wish) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Wish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["product"] = o.Product
	toSerialize["price"] = o.Price
	toSerialize["url"] = o.Url
	toSerialize["priority"] = o.Priority
	return toSerialize, nil
}

func (o *Wish) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"product",
		"price",
		"url",
		"priority",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWish := _Wish{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWish)

	if err != nil {
		return err
	}

	*o = Wish(varWish)

	return err
}

type NullableWish struct {
	value *Wish
	isSet bool
}

func (v NullableWish) Get() *Wish {
	return v.value
}

func (v *NullableWish) Set(val *Wish) {
	v.value = val
	v.isSet = true
}

func (v NullableWish) IsSet() bool {
	return v.isSet
}

func (v *NullableWish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWish(val *Wish) *NullableWish {
	return &NullableWish{value: val, isSet: true}
}

func (v NullableWish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


